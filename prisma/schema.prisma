// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())

  workoutTemplates WorkoutTemplate[]
  workoutSessions  WorkoutSession[]
  sessions        Session[]
}

model Session {
  id           String   @id @default(uuid())
  userId       String
  token        String   @unique
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Exercise {
  id              String   @id @default(uuid())
  name            String
  category        String
  force           String?
  level           String?
  mechanic        String?
  equipment       String?
  primaryMuscles  String[]
  secondaryMuscles String[]
  instructions    String[]
  image           String?

  workoutTemplateExercises WorkoutTemplateExercise[]
  workoutSessionExercises WorkoutSessionExercise[]
}

model WorkoutTemplate {
  id        String   @id @default(uuid())
  name      String
  userId    String
  createdAt DateTime @default(now())

  user      User @relation(fields: [userId], references: [id])
  exercises WorkoutTemplateExercise[]
  workoutSessions WorkoutSession[]
}

model WorkoutTemplateExercise {
  id                String   @id @default(uuid())
  workoutTemplateId String
  exerciseId        String
  createdAt         DateTime @default(now())

  workoutTemplate   WorkoutTemplate @relation(fields: [workoutTemplateId], references: [id])
  exercise          Exercise @relation(fields: [exerciseId], references: [id])
  sets              WorkoutTemplateSet[]
}

model WorkoutTemplateSet {
  id          String   @id @default(uuid())
  workoutTemplateExerciseId String
  order       Int
  reps        Int
  weight      Float
  createdAt   DateTime @default(now())

  workoutTemplateExercise WorkoutTemplateExercise @relation(fields: [workoutTemplateExerciseId], references: [id])
}

model WorkoutSession {
  id        String   @id @default(uuid())
  userId    String
  workoutTemplateId String?  // Optional: Can be based on a template
  startTime DateTime
  endTime   DateTime?
  createdAt DateTime @default(now())

  user      User @relation(fields: [userId], references: [id])
  workoutTemplate WorkoutTemplate? @relation(fields: [workoutTemplateId], references: [id])
  exercises WorkoutSessionExercise[]
}

model WorkoutSessionExercise {
  id                String   @id @default(uuid())
  workoutSessionId  String
  exerciseId        String
  createdAt         DateTime @default(now())

  workoutSession    WorkoutSession @relation(fields: [workoutSessionId], references: [id])
  exercise          Exercise @relation(fields: [exerciseId], references: [id])
  sets              WorkoutSessionSet[]
}

model WorkoutSessionSet {
  id                 String   @id @default(uuid())
  workoutSessionExerciseId String
  order              Int
  reps               Int
  weight             Float
  createdAt          DateTime @default(now())

  workoutSessionExercise WorkoutSessionExercise @relation(fields: [workoutSessionExerciseId], references: [id])
}